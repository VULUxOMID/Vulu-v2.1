require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'VULU' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # Fix C++ compilation issues with Xcode 26.0+ and Hermes
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Enable C++20 threading support for Hermes compatibility
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'

        # Add C++ standard library flags (properly formatted)
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(OTHER_CFLAGS) -pthread -std=c++20'

        # Ensure proper iOS deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'

        # Add threading support headers
        config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
        config.build_settings['HEADER_SEARCH_PATHS'] << '"$(SDKROOT)/usr/include/c++/v1"'

        # Suppress third-party library warnings
        config.build_settings['WARNING_CFLAGS'] ||= ['$(inherited)']
        config.build_settings['WARNING_CFLAGS'] << '-Wno-nullability-completeness'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-deprecated-declarations'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-implicit-int-conversion'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-unused-variable'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-deprecated-implementations'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-shorten-64-to-32'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-sign-conversion'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-unused-parameter'
        config.build_settings['WARNING_CFLAGS'] << '-Wno-incompatible-pointer-types'

        # Suppress all warnings for third-party Pods
        if target.name.include?('Pods-') ||
           target.name.include?('expo-') ||
           target.name.include?('React') ||
           target.name.include?('RN') ||
           target.name.include?('react-native') ||
           target.name.include?('Flipper') ||
           target.name.include?('Firebase') ||
           target.name.include?('Google') ||
           target.name.include?('Agora') ||
           target.name.include?('Reanimated')
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
          config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        end

        # Special handling for Agora SDK
        if target.name.include?('Agora')
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          config.build_settings['VALID_ARCHS'] = 'arm64 x86_64'
          config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        end

        # Special handling for Yoga (React Native layout engine)
        if target.name == 'Yoga'
          config.build_settings['WARNING_CFLAGS'] = ['$(inherited)', '-Wno-implicit-int-conversion', '-Wno-shorten-64-to-32']
        end

        # Suppress dSYM warnings for third-party frameworks that don't include debug symbols
        if target.name.start_with?('Agora') || target.name == 'hermes-engine'
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
          config.build_settings['ENABLE_BITCODE'] = 'NO'
        end
      end

      # Fix run script phases to prevent "no output dependencies" warnings
      target.build_phases.each do |phase|
        if phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase)
          phase.always_out_of_date = "0"
          # Add output dependencies for common script phases
          if phase.name&.include?('dSYM') || phase.name&.include?('Generate updates')
            phase.output_paths ||= []
            phase.output_paths << "$(DERIVED_FILE_DIR)/script_output.txt" if phase.output_paths.empty?
          end
        end
      end
    end

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # Path Safety & macOS Compatibility Fixes
    # Fix GNU-only readlink -f and unquoted paths in CocoaPods generated scripts
    puts "🔧 Applying path safety fixes to CocoaPods scripts..."

    target_support_files_dir = File.join(installer.sandbox.root, 'Target Support Files')

    Dir.glob("#{target_support_files_dir}/**/Pods-*-frameworks.sh").each do |script_path|
      puts "  📝 Patching frameworks script: #{File.basename(script_path)}"

      content = File.read(script_path)
      original_content = content.dup

      # Fix GNU-only readlink -f with Python realpath
      content.gsub!(
        /source="\$\(readlink -f "\$\{source\}"\)"/,
        'source="$(/usr/bin/python3 -c \'import os,sys; print(os.path.realpath(sys.argv[1]))\' "${source}")"'
      )

      # Fix symlinked binary handling with proper path resolution
      content.gsub!(
        /binary="\$\{dirname\}\/\$\(readlink "\$\{binary\}"\)"/,
        'binary="$(/usr/bin/python3 -c \'import os,sys; p=sys.argv[1]; d=os.path.dirname(p); t=os.readlink(p); print(t if os.path.isabs(t) else os.path.normpath(os.path.join(d,t)))\' "$binary")"'
      )

      if content != original_content
        File.write(script_path, content)
        puts "    ✅ Fixed GNU readlink compatibility"
      end
    end

    Dir.glob("#{target_support_files_dir}/**/Pods-*-resources.sh").each do |script_path|
      puts "  📝 Patching resources script: #{File.basename(script_path)}"

      content = File.read(script_path)
      original_content = content.dup

      # Fix unquoted RESOURCES_TO_COPY variable
      content.gsub!(
        /^RESOURCES_TO_COPY=\$\{PODS_ROOT\}\/resources-to-copy-\$\{TARGETNAME\}\.txt$/,
        'RESOURCES_TO_COPY="${PODS_ROOT}/resources-to-copy-${TARGETNAME}.txt"'
      )

      # Fix unquoted paths in echo statements for ibtool commands
      content.gsub!(
        /--compile \$\{TARGET_BUILD_DIR\}\/\$\{UNLOCALIZED_RESOURCES_FOLDER_PATH\}\//,
        '--compile "${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/"'
      )

      content.gsub!(
        /\$RESOURCE_PATH --sdk \$\{SDKROOT\} \$\{TARGET_DEVICE_ARGS\}/,
        '"$RESOURCE_PATH" --sdk "${SDKROOT}" ${TARGET_DEVICE_ARGS}'
      )

      # Fix rsync command quoting
      content.gsub!(
        /rsync --delete -av "\$\{RSYNC_PROTECT_TMP_FILES\[@\]\}" \$RESOURCE_PATH \$\{TARGET_BUILD_DIR\}\/\$\{FRAMEWORKS_FOLDER_PATH\}/,
        'rsync --delete -av "${RSYNC_PROTECT_TMP_FILES[@]}" "$RESOURCE_PATH" "${TARGET_BUILD_DIR}/${FRAMEWORKS_FOLDER_PATH}"'
      )

      if content != original_content
        File.write(script_path, content)
        puts "    ✅ Fixed path quoting"
      end
    end

    # Fix hard-coded paths in expo-configure-project.sh
    Dir.glob("#{target_support_files_dir}/**/expo-configure-project.sh").each do |script_path|
      puts "  📝 Patching Expo configure script: #{File.basename(script_path)}"

      content = File.read(script_path)
      original_content = content.dup

      # Replace hard-coded absolute paths with environment variables
      content.gsub!(
        %r{--target "/[^"]*?/ios/Pods/Target Support Files/([^/]+)/ExpoModulesProvider\.swift"},
        '--target "${PODS_ROOT}/Target Support Files/\1/ExpoModulesProvider.swift"'
      )

      content.gsub!(
        %r{--entitlement "/[^"]*?/ios/([^/]+)/\1\.entitlements"},
        '--entitlement "${PODS_ROOT}/../\1/\1.entitlements"'
      )

      if content != original_content
        File.write(script_path, content)
        puts "    ✅ Fixed hard-coded paths"
      end
    end

    puts "✅ Path safety fixes applied successfully!"
  end
end
