import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, FlatList, TouchableOpacity, ScrollView, Image, GestureResponderEvent, Platform, UIManager, LayoutAnimation, Alert, Switch } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { MaterialIcons } from '@expo/vector-icons';
import CommonHeader from '../components/CommonHeader';
import { useRouter } from 'expo-router';
import NotificationItem, { Notification } from '../components/NotificationItem';
import { BlurView } from 'expo-blur';
import CustomModal from '../components/CustomModal';
import { useModal } from '../hooks/useModal';

// Enable LayoutAnimation on Android
if (
  Platform.OS === "android" &&
  UIManager.setLayoutAnimationEnabledExperimental
) {
  UIManager.setLayoutAnimationEnabledExperimental(true);
}

// Enhanced animation config for more noticeable effect
const animationConfig = {
  duration: 300,
  create: { 
    type: LayoutAnimation.Types.spring, 
    property: LayoutAnimation.Properties.scaleXY, 
    springDamping: 0.7 
  },
  update: { 
    type: LayoutAnimation.Types.spring, 
    springDamping: 0.7 
  },
  delete: { 
    type: LayoutAnimation.Types.spring, 
    property: LayoutAnimation.Properties.scaleXY, 
    springDamping: 0.7 
  },
};

// --- Announcement Widget (Restored and Redesigned) ---
interface AnnouncementData {
  id: string;
  adminAvatar: string; // URL for the admin's avatar
  message: string;
  time: string;
  targetRoute: string;
  targetParams: Record<string, any>;
}

const AnnouncementWidget = () => {
  const router = useRouter();
  const [isExpanded, setIsExpanded] = useState(false);
  const [visibleCount, setVisibleCount] = useState(2); // Initial number of visible announcements
  
  // Extended dummy data with 7 announcements (one for each day of the week)
  const announcements: AnnouncementData[] = [
    {
      id: 'a1',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/1.jpg',
      message: '@Announcement Spotlight duration categories are here!',
      time: '1d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a2',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/2.jpg',
      message: '@Announcement Scheduled Maintenance: Brief downtime expected tonight at 2 AM.',
      time: '2d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a3',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/3.jpg',
      message: '@Announcement New trading features coming soon to the platform!',
      time: '3d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a4',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/4.jpg',
      message: '@Announcement Weekend challenge: Double Gold rewards for active users!',
      time: '4d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a5',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/5.jpg',
      message: '@Announcement Community spotlight: Submit your best content for features!',
      time: '5d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a6',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/6.jpg',
      message: '@Announcement App update v2.1.0 available with new performance improvements',
      time: '6d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
    {
      id: 'a7',
      adminAvatar: 'https://randomuser.me/api/portraits/lego/7.jpg',
      message: '@Announcement Welcome to our new community members! Check out the starter guide.',
      time: '7d ago',
      targetRoute: '/chat',
      targetParams: { chatId: 'global' },
    },
  ];
  const [unreadCount, setUnreadCount] = useState(announcements.length);

  const handleAnnouncementPress = (item: AnnouncementData) => {
    router.push({ pathname: item.targetRoute, params: item.targetParams });
    // No need to clear count here, toggleExpand handles it
  };

  // Handle "More" button press - show additional announcements
  const handleLoadMore = (e: GestureResponderEvent) => {
    e.stopPropagation(); // Prevent the widget from collapsing when clicking More
    // Increase visible count by 5 each time, or show all remaining
    setVisibleCount(prev => Math.min(prev + 5, announcements.length));
  };

  const toggleExpand = () => {
    LayoutAnimation.configureNext(animationConfig);
    const expanding = !isExpanded;
    setIsExpanded(expanding);
    
    // Clear count only when expanding announcements
    if (expanding) {
        setUnreadCount(0);
    } else {
        // Reset visibleCount back to 2 when collapsing the widget
        setVisibleCount(2);
    }
  }

  return (
    <TouchableOpacity
      style={styles.widgetContainer}
      onPress={toggleExpand}
      activeOpacity={0.9}
    >
      <View style={styles.widgetHeader}>
        <View style={styles.widgetTitleContainer}>
          <Text style={styles.widgetTitle}>Announcements</Text>
          {/* Render count badge if count > 0 */}
          {unreadCount > 0 && (
            <View style={styles.widgetCountBadge}>
              <Text style={styles.widgetCountText}>{unreadCount}</Text>
            </View>
          )}
        </View>
        <View>
          <MaterialIcons name={isExpanded ? 'expand-less' : 'expand-more'} size={24} color="#FFFFFF" />
        </View>
      </View>
      {isExpanded && (
        <View style={styles.widgetContent}>
          {/* Show only visibleCount announcements */}
          <ScrollView
            style={visibleCount > 2 ? styles.scrollableAnnouncements : undefined}
            nestedScrollEnabled={true}
          >
            {announcements.slice(0, visibleCount).map((item) => {
              const tag = '@Announcement';
              let messageContent;
              if (item.message.startsWith(tag + ' ')) {
                messageContent = (
                  <Text style={styles.announcementMessage}>
                    <Text style={styles.announcementTag}>{tag}</Text>
                    {' '}
                    <Text>{item.message.substring(tag.length + 1)}</Text>
                  </Text>
                );
              } else {
                // Fallback if message doesn't start with tag (shouldn't happen ideally)
                messageContent = <Text style={styles.announcementMessage}>{item.message}</Text>;
              }

              return (
                <TouchableOpacity 
                  key={item.id} 
                  style={styles.announcementItem} 
                  onPress={() => handleAnnouncementPress(item)}
                  activeOpacity={0.7}
                >
                  <Image source={{ uri: item.adminAvatar }} style={styles.announcementAvatar} />
                  <View style={styles.announcementTextContainer}>
                    {messageContent}
                    <Text style={styles.announcementTime}>{item.time}</Text>
                  </View>
                </TouchableOpacity>
              );
            })}
          </ScrollView>
          
          {/* "More" button - only show if there are more announcements to load */}
          {isExpanded && visibleCount < announcements.length && (
            <TouchableOpacity 
              style={styles.moreButton}
              onPress={handleLoadMore}
              activeOpacity={0.7}
            >
              <Text style={styles.moreButtonText}>More</Text>
              <MaterialIcons name="expand-more" size={18} color="#A0A0A0" />
            </TouchableOpacity>
          )}
        </View>
      )}
    </TouchableOpacity>
  );
};

// --- FriendRequestWidget ---
interface FriendRequest {
    id: string;
    name: string;
    avatar: string;
    mutual: number;
    userId: string; // Added for profile navigation
    status: 'pending' | 'accepted' | 'declined'; // Added status
}

const FriendRequestWidget = () => {
  const router = useRouter(); // Need router for profile navigation
  const [isExpanded, setIsExpanded] = useState(false);
  const [visibleCount, setVisibleCount] = useState(2); // Initial number of visible requests
  
  // Extended dummy data with many friend requests for scrolling demo
  const initialRequests: FriendRequest[] = [
    { id: 'fr1', name: 'GamerGuy42', avatar: 'https://randomuser.me/api/portraits/men/42.jpg', mutual: 3, userId: 'gamerguy42', status: 'pending' },
    { id: 'fr2', name: 'PixelPrincess', avatar: 'https://randomuser.me/api/portraits/women/55.jpg', mutual: 1, userId: 'pixelprincess', status: 'pending' },
    { id: 'fr3', name: 'DevNinja', avatar: 'https://randomuser.me/api/portraits/men/22.jpg', mutual: 5, userId: 'devninja', status: 'pending' },
    { id: 'fr4', name: 'MusicLover88', avatar: 'https://randomuser.me/api/portraits/women/33.jpg', mutual: 2, userId: 'musiclover88', status: 'pending' },
    { id: 'fr5', name: 'FitnessGuru', avatar: 'https://randomuser.me/api/portraits/men/29.jpg', mutual: 0, userId: 'fitnessguru', status: 'pending' },
    { id: 'fr6', name: 'ArtCreator', avatar: 'https://randomuser.me/api/portraits/women/44.jpg', mutual: 7, userId: 'artcreator', status: 'pending' },
    { id: 'fr7', name: 'TechWizard', avatar: 'https://randomuser.me/api/portraits/men/77.jpg', mutual: 4, userId: 'techwizard', status: 'pending' },
    { id: 'fr8', name: 'BookWorm', avatar: 'https://randomuser.me/api/portraits/women/66.jpg', mutual: 0, userId: 'bookworm', status: 'pending' },
    { id: 'fr9', name: 'TravelJunkie', avatar: 'https://randomuser.me/api/portraits/men/91.jpg', mutual: 6, userId: 'traveljunkie', status: 'pending' },
    { id: 'fr10', name: 'FoodieExplorer', avatar: 'https://randomuser.me/api/portraits/women/75.jpg', mutual: 3, userId: 'foodieexplorer', status: 'pending' },
    { id: 'fr11', name: 'MovieBuff', avatar: 'https://randomuser.me/api/portraits/men/32.jpg', mutual: 0, userId: 'moviebuff', status: 'pending' },
    { id: 'fr12', name: 'SportsEnthusiast', avatar: 'https://randomuser.me/api/portraits/women/28.jpg', mutual: 2, userId: 'sportsenthusiast', status: 'pending' },
    { id: 'fr13', name: 'NatureLover', avatar: 'https://randomuser.me/api/portraits/men/18.jpg', mutual: 1, userId: 'naturelover', status: 'pending' },
    { id: 'fr14', name: 'FashionIcon', avatar: 'https://randomuser.me/api/portraits/women/15.jpg', mutual: 0, userId: 'fashionicon', status: 'pending' },
    { id: 'fr15', name: 'GadgetGeek', avatar: 'https://randomuser.me/api/portraits/men/56.jpg', mutual: 4, userId: 'gadgetgeek', status: 'pending' },
  ];
  const [requests, setRequests] = useState<FriendRequest[]>(initialRequests);
  const [requestCount, setRequestCount] = useState(requests.filter(r => r.status === 'pending').length); // Count only pending

  const handleAccept = (id: string) => {
    setRequests(currentRequests =>
      currentRequests.map(req =>
        req.id === id ? { ...req, status: 'accepted' } : req
      )
    );
    // Update badge count after state update (or use effect)
    setRequestCount(prev => prev -1); 
  }

  const handleDecline = (id: string) => {
    setRequests(currentRequests =>
      currentRequests.map(req =>
        req.id === id ? { ...req, status: 'declined' } : req
      )
    );
     // Update badge count after state update (or use effect)
    setRequestCount(prev => prev - 1);
  }

  const handleProfilePress = (userId: string) => {
    // Navigate to profile even after accept/decline
    router.push({ pathname: '/profile', params: { userId: userId } });
  };

  // Handle "More" button press
  const handleLoadMore = (e: GestureResponderEvent) => {
    e.stopPropagation(); // Prevent the widget from collapsing when clicking More
    // Increase visible count by 5 each time, or show all remaining
    setVisibleCount(prev => Math.min(prev + 5, requests.length));
  };

  // Expanding doesn't clear friend request count
  const toggleExpand = () => {
      LayoutAnimation.configureNext(animationConfig);
      const expanding = !isExpanded;
      setIsExpanded(expanding);
      
      if (!expanding) {
          // Reset visibleCount back to 2 when collapsing the widget
          setVisibleCount(2);
      }
  }

  return (
    <TouchableOpacity
      style={styles.widgetContainer}
      onPress={toggleExpand}
      activeOpacity={0.9}
    >
      <View style={styles.widgetHeader}>
        <View style={styles.widgetTitleContainer}>
          <Text style={styles.widgetTitle}>Friend Requests</Text>
          {/* Render count badge based on pending requests */}
          {requestCount > 0 && (
            <View style={styles.widgetCountBadge}>
              <Text style={styles.widgetCountText}>{requestCount}</Text>
            </View>
          )}
        </View>
        <View>
          <MaterialIcons name={isExpanded ? 'expand-less' : 'expand-more'} size={24} color="#FFFFFF" />
        </View>
      </View>
      {isExpanded && (
        <View style={styles.widgetContent}>
          {/* Render requests with pagination */}
          <ScrollView
            style={visibleCount > 2 ? styles.scrollableRequests : undefined}
            nestedScrollEnabled={true}
          >
            {requests.slice(0, visibleCount).map((req) => (
              <View 
                key={req.id} 
                style={styles.requestItem}
              > 
                {/* Wrap avatar/info in Touchable for profile navigation */}
                <TouchableOpacity onPress={() => handleProfilePress(req.userId)} style={styles.requestProfileTouchable}> 
                  <Image source={{ uri: req.avatar }} style={styles.requestAvatar} />
                  <View style={styles.requestInfo}>
                    <Text style={styles.requestName}>{req.name}</Text>
                    {req.mutual > 0 && (
                      <Text style={styles.requestMutual}>{req.mutual} mutual friend{req.mutual > 1 ? 's' : ''}</Text>
                    )}
                  </View>
                </TouchableOpacity>

                {/* Conditionally render buttons only if status is pending */}
                {req.status === 'pending' && (
                    <View style={styles.requestActions} onStartShouldSetResponder={() => true}> 
                      <TouchableOpacity style={[styles.requestButton, styles.acceptButton]} onPress={() => handleAccept(req.id)}>
                        <MaterialIcons name="check" size={18} color="#FFFFFF" />
                      </TouchableOpacity>
                      <TouchableOpacity style={[styles.requestButton, styles.declineButton]} onPress={() => handleDecline(req.id)}>
                        <MaterialIcons name="close" size={18} color="#FFFFFF" />
                      </TouchableOpacity>
                    </View>
                )}
              </View>
            ))}
          </ScrollView>
          
          {/* "More" button - only show if there are more requests to load */}
          {isExpanded && visibleCount < requests.length && (
            <TouchableOpacity 
              style={styles.moreButton}
              onPress={handleLoadMore}
              activeOpacity={0.7}
            >
              <Text style={styles.moreButtonText}>More</Text>
              <MaterialIcons name="expand-more" size={18} color="#A0A0A0" />
            </TouchableOpacity>
          )}
        </View>
      )}
    </TouchableOpacity>
  );
};

// --- ProfileViewWidget (Keep as is) ---
interface ProfileView {
  id: string;
  viewerId: string;
  viewerName: string;
  viewerAvatar: string | undefined;
  timestamp: string;
  dateCreated: Date;
  seen: boolean;
  isPremiumViewer: boolean;
  isRevealed: boolean;
  isGhostMode?: boolean; // Add ghost mode flag
  visitCount: number;
}

const ProfileViewWidget = () => {
  const router = useRouter();
  const [isExpanded, setIsExpanded] = useState(false);
  const [hasGemPlus, setHasGemPlus] = useState(true); // Set to true to demo premium features
  const [isAnonymousBrowsing, setIsAnonymousBrowsing] = useState(false); // Privacy toggle for premium users
  const [premiumPreviewsUsed, setPremiumPreviewsUsed] = useState(0); // Track preview usage
  const [premiumPreviewActive, setPremiumPreviewActive] = useState(false); // Track if preview is active
  const [revealedPreviewViews, setRevealedPreviewViews] = useState<string[]>([]); // IDs of views revealed in preview
  const [visibleCount, setVisibleCount] = useState(3); // Initial number of visible views - reduced to 3
  const [isLoadingMore, setIsLoadingMore] = useState(false); // Track loading state for infinite scroll
  
  // Custom modal hook
  const ghostModal = useModal();
  
  // Generate a timestamp string based on date
  const getTimeString = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    if (diffMinutes < 1) return 'just now';
    if (diffMinutes < 60) return `${diffMinutes}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays === 1) return 'yesterday';
    if (diffDays < 7) return `${diffDays} days ago`;
    return date.toLocaleDateString();
  };
  
  // Extended dummy data with 25 profile views and proper dates
  const generateInitialViews = () => {
    const names = [
      'Emma Wilson', 'Liam Johnson', 'Olivia Martinez', 
      'Noah Smith', 'Ava Thompson', 'Lucas Brown',
      'Sophia Davis', 'Ethan Miller', 'Isabella Garcia'
    ];
    
    // Ghost users that will always appear in the first few positions
    const ghostUsers: ProfileView[] = [
      {
        id: 'ghost-1',
        viewerId: 'ghost-user-123',
        viewerName: 'Luna Ghost',
        viewerAvatar: 'https://randomuser.me/api/portraits/women/44.jpg',
        timestamp: '2 hours ago',
        dateCreated: new Date(Date.now() - 2 * 60 * 60 * 1000),
        seen: false,
        isPremiumViewer: true,
        isGhostMode: true,
        isRevealed: false,
        visitCount: 3
      },
      {
        id: 'ghost-2',
        viewerId: 'ghost-user-456',
        viewerName: 'Max Stealth',
        viewerAvatar: 'https://randomuser.me/api/portraits/men/33.jpg',
        timestamp: '1 day ago',
        dateCreated: new Date(Date.now() - 24 * 60 * 60 * 1000),
        seen: true,
        isPremiumViewer: true,
        isGhostMode: true,
        isRevealed: false,
        visitCount: 5
      }
    ];
    
    // Generate random views
    const randomViews: ProfileView[] = [];
    for (let i = 0; i < 8; i++) {
      const id = (i + 2).toString();
      const randomIndex = Math.floor(Math.random() * names.length);
      const name = names[randomIndex];
      const gender = Math.random() > 0.5 ? 'men' : 'women';
      const avatarNumber = Math.floor(Math.random() * 70) + 1;
      const hoursAgo = Math.floor(Math.random() * 24) + 1;
      const isPremium = Math.random() > 0.7;
      
      randomViews.push({
        id,
        viewerId: `user-${id}`,
        viewerName: name,
        viewerAvatar: `https://randomuser.me/api/portraits/${gender}/${avatarNumber}.jpg`,
        timestamp: hoursAgo === 1 ? '1 hour ago' : `${hoursAgo} hours ago`,
        dateCreated: new Date(Date.now() - hoursAgo * 60 * 60 * 1000),
        seen: Math.random() > 0.5,
        isPremiumViewer: isPremium,
        isGhostMode: false, // Most regular users aren't in ghost mode
        isRevealed: false,
        visitCount: Math.floor(Math.random() * 5) + 1 // Random 1-5 visits
      });
    }
    
    // Combine ghost users with random views
    const allViews = [...ghostUsers, ...randomViews];
    
    // Sort by dateCreated (newest first)
    return allViews.sort((a, b) => b.dateCreated.getTime() - a.dateCreated.getTime());
  };

  const [profileViews, setProfileViews] = useState<ProfileView[]>(generateInitialViews());

  // Apply retention policy - 7 days
  useEffect(() => {
    // This would normally run on app startup or when fetching profile views
    const applyRetentionPolicy = () => {
      const now = new Date();
      const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      
      setProfileViews(currentViews => 
        currentViews.filter(view => view.dateCreated >= sevenDaysAgo)
      );
    };
    
    // Apply retention policy
    applyRetentionPolicy();
    
    // This would normally be on a timer or when app opens
    const retentionInterval = setInterval(applyRetentionPolicy, 24 * 60 * 60 * 1000); // Check daily
    
    return () => clearInterval(retentionInterval);
  }, []);

  // Simulate new profile views for demo purposes
  useEffect(() => {
    // Function to add a random new profile view
    const addNewProfileView = () => {
      const now = new Date();
      const names = ['NewViewer', 'JustJoined', 'FreshLook', 'RecentView'];
      const randomIndex = Math.floor(Math.random() * names.length);
      const isPremium = Math.random() > 0.7;
      const isGhost = isPremium && Math.random() > 0.5; // Only premium users can be in ghost mode
      
      // Random visit count for new viewers (1-5)
      const visitCount = Math.floor(Math.random() * 5) + 1;
      
      const newView: ProfileView = {
        id: `pv-new-${Date.now()}`,
        viewerId: `user-new-${Date.now()}`,
        viewerName: names[randomIndex],
        viewerAvatar: `https://randomuser.me/api/portraits/${Math.random() > 0.5 ? 'men' : 'women'}/${Math.floor(Math.random() * 10) + 1}.jpg`,
        timestamp: 'just now',
        dateCreated: now,
        seen: false,
        isPremiumViewer: isPremium,
        isGhostMode: isGhost,
        isRevealed: false,
        visitCount: visitCount
      };
      
      // Add the new view at the beginning of the array (most recent)
      setProfileViews(prevViews => [newView, ...prevViews]);
    };
    
    // For demo purposes, add a new view every 30-60 seconds
    const randomInterval = Math.floor(Math.random() * 30000) + 30000;
    const interval = setInterval(addNewProfileView, randomInterval);
    
    return () => clearInterval(interval);
  }, []);
  
  const totalViewCount = profileViews.length;
  const newViewCount = profileViews.filter(view => !view.seen).length;

  // Handle loading more views - increase by 10 at a time
  const handleLoadMore = (e: GestureResponderEvent) => {
    e.stopPropagation(); // Prevent widget from collapsing
    setVisibleCount(prev => Math.min(prev + 10, profileViews.length));
  };

  const handleViewPress = (view: ProfileView, e?: GestureResponderEvent) => {
    if (e) e.stopPropagation();
    
    // Mark as seen
    setProfileViews(prev => 
      prev.map(v => v.id === view.id ? {...v, seen: true} : v)
    );
    
    // Handle navigation based on subscription and reveal status
    if (hasGemPlus || premiumPreviewActive) {
      // If it's a premium viewer who was browsing anonymously and hasn't been revealed
      if (view.isPremiumViewer && !view.isRevealed) {
        promptPurchaseReveal(view);
      } else if (view.viewerId) {
        router.push({ pathname: '/profile', params: { userId: view.viewerId } });
      }
    }
  };
  
  // Prompt for purchase of identity reveal
  const promptPurchaseReveal = (view: ProfileView) => {
    // First confirmation step with warning and explanation
    Alert.alert(
      "💎 Confirm Purchase 💎",
      `Are you sure you want to reveal this ghost's identity?\n\n⚠️ This will cost 100 Gems\n\n⚠️ This is a one-time reveal. If they visit your profile again using Ghost Mode, you'll need to pay again to see who they are.`,
      [
        {
          text: "Yes, Continue",
          onPress: () => {
            // Second confirmation with gem balance and final warning
            Alert.alert(
              "💎 Confirm Payment 💎",
              `Your current balance: 1,200 Gems\nCost to reveal: 100 Gems\nNew balance will be: 1,100 Gems\n\nAre you sure you want to proceed with this purchase?`,
              [
                {
                  text: "Cancel",
                  style: "cancel"
                },
                {
                  text: "Confirm Purchase",
                  style: "destructive", // iOS will show this in red
                  onPress: () => purchaseReveal(view)
                }
              ],
              { cancelable: true }
            );
          }
        },
        {
          text: "Cancel",
          style: "cancel"
        }
      ],
      { cancelable: true }
    );
  };
  
  // Handle identity reveal purchase
  const purchaseReveal = (view: ProfileView) => {
    // Show success message
    Alert.alert(
      "🎉 Identity Revealed!",
      "You've successfully revealed this ghost's identity. You can now view their full profile.",
      [{ text: "View Profile" }]
    );
    
    // For demo purposes, just update the state
    setProfileViews(prev => 
      prev.map(v => v.id === view.id ? {...v, isRevealed: true} : v)
    );
  };

  const handleUpgradePress = () => {
    // Show premium modal instead of direct navigation
    ghostModal.showConfirmation(
      "Upgrade to Gem Plus",
      "Get access to premium features including seeing who viewed your profile and Ghost Mode browsing.",
      () => {
        // TODO: Navigate to subscription screen
        router.push({ pathname: '/gem-plus-subscription' });
      },
      undefined,
      "View Plans",
      "Later",
      { name: "workspace-premium", background: "#B768FB" }
    );
  };
  
  // Preview premium functionality
  const handlePreviewPress = (e: GestureResponderEvent) => {
    e.stopPropagation();
    
    if (premiumPreviewsUsed >= 3) {
      ghostModal.showError(
        "Preview Limit Reached",
        "You've used all 3 premium previews for this month. Subscribe to Gem Plus for unlimited access!",
        () => router.push({ pathname: '/gem-plus-subscription' }),
        "Learn More"
      );
      return;
    }
    
    // Store IDs of the first 3 views to keep them revealed
    const viewIdsToReveal = profileViews.slice(0, 3).map(view => view.id);
    setRevealedPreviewViews(viewIdsToReveal);
    
    // Activate premium preview - will show top 3 unblurred, rest still blurred
    setPremiumPreviewActive(true);
    setPremiumPreviewsUsed(prev => prev + 1);
    
    ghostModal.showSuccess(
      "Premium Preview Active",
      `You can now see your 3 most recent profile viewers! Upgrade to see all of them. (${3 - premiumPreviewsUsed} previews remaining this month)`,
    );
  };
  
  // Toggle anonymous browsing (premium feature)
  const toggleAnonymousBrowsing = () => {
    if (hasGemPlus) {
      setIsAnonymousBrowsing(!isAnonymousBrowsing);
    } else {
      // Use custom modal instead of Alert
      ghostModal.showConfirmation(
        "Premium Feature",
        "Ghost Mode is available with Gem Plus subscription. Upgrade to browse profiles without being seen.",
        handleUpgradePress,
        undefined,
        "Upgrade",
        "Later",
        { name: "visibility-off", background: "#8F8F8F" }
      );
    }
  };

  const toggleExpand = () => {
    LayoutAnimation.configureNext(animationConfig);
    const expanding = !isExpanded;
    setIsExpanded(expanding);
    
    if (expanding) {
      // Mark all as seen when expanding
      setProfileViews(prev => 
        prev.map(v => ({...v, seen: true}))
      );
    } else {
      // Reset visible count when collapsing
      setVisibleCount(3);
    }
  };

  return (
    <>
      <TouchableOpacity
        style={[
          styles.widgetContainer, 
          newViewCount > 0 && styles.glowingWidget, 
          { borderColor: '#B768FB' }
        ]}
        onPress={toggleExpand}
        activeOpacity={0.9}
      >
        <View style={styles.widgetHeader}>
          <View style={styles.widgetTitleContainer}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
               <MaterialIcons name="visibility" size={18} color="#B768FB" style={{ marginRight: 6 }} />
               <Text style={styles.widgetTitle}>Profile Views</Text>
            </View>
            {/* Render count badge if count > 0 */}
            {newViewCount > 0 && (
              <View style={styles.widgetCountBadge}>
                <Text style={styles.widgetCountText}>{newViewCount}</Text>
              </View>
            )}
          </View>
          <View>
            <MaterialIcons name={isExpanded ? 'expand-less' : 'expand-more'} size={24} color="#FFFFFF" />
          </View>
        </View>
        
        {isExpanded ? (
          <View style={styles.widgetContent}>
            {profileViews.length > 0 ? (
              <>
                <View style={styles.profileViewHeader}>
                  <Text style={styles.totalCountText}>Total Views: {totalViewCount}</Text>
                  
                  <View style={styles.headerRightActions}>
                    {/* Info icon with retention policy message */}
                    <TouchableOpacity 
                      style={styles.infoButton}
                      onPress={() => ghostModal.showConfirmation(
                        'Profile Views',
                        'Profile views are stored for 7 days. After this period, they will automatically be removed.',
                        () => {},
                        undefined,
                        'OK',
                        undefined, // No cancel button needed
                        { name: 'info-outline', background: '#555555' }
                      )}
                    >
                      <MaterialIcons name="info-outline" size={16} color="#8F8F8F" />
                    </TouchableOpacity>
                    
                    {/* Anonymous browsing toggle for all users */}
                    <View style={styles.anonymousToggle}>
                      <Text style={styles.anonymousText}>
                        Ghost Mode
                      </Text>
                      
                      {!hasGemPlus && (
                        <MaterialIcons name="lock" size={12} color="#8F8F8F" style={{ marginLeft: 4, marginRight: 8 }} />
                      )}
                      
                      <Switch
                        trackColor={{ false: "#767577", true: "rgba(183, 104, 251, 0.4)" }}
                        thumbColor={isAnonymousBrowsing && hasGemPlus ? "#B768FB" : "#f4f3f4"}
                        ios_backgroundColor="#3e3e3e"
                        onValueChange={() => {
                          if (hasGemPlus) {
                            toggleAnonymousBrowsing();
                          } else {
                            // Use custom modal instead of Alert
                            ghostModal.showConfirmation(
                              "Premium Feature",
                              "Ghost Mode is available with Gem Plus subscription. Upgrade to browse profiles without being seen.",
                              handleUpgradePress,
                              undefined,
                              "Upgrade",
                              "Later",
                              { name: "visibility-off", background: "#8F8F8F" }
                            );
                          }
                        }}
                        value={isAnonymousBrowsing && hasGemPlus}
                      />
                    </View>
                  </View>
                </View>
                
                {/* Scrollable view list with infinite scrolling */}
                <ScrollView
                  style={styles.scrollableViews}
                  nestedScrollEnabled={true}
                  showsVerticalScrollIndicator={true}
                  indicatorStyle="white"
                  contentContainerStyle={{ paddingBottom: 10 }}
                  onScroll={({ nativeEvent }) => {
                    // Check if we're near the bottom of the scroll
                    const isCloseToBottom = ({ 
                      layoutMeasurement, 
                      contentOffset, 
                      contentSize 
                    }: { 
                      layoutMeasurement: { height: number }, 
                      contentOffset: { y: number }, 
                      contentSize: { height: number } 
                    }) => {
                      const paddingToBottom = 20; // Load more when within 20px of bottom
                      return layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;
                    };
                    
                    if (isCloseToBottom(nativeEvent) && visibleCount < profileViews.length) {
                      // Show loading indicator
                      setIsLoadingMore(true);
                      
                      // Simulate a small loading delay for smoother UX
                      setTimeout(() => {
                        // Load 5 more items when we're close to the bottom
                        setVisibleCount(prev => Math.min(prev + 5, profileViews.length));
                        setIsLoadingMore(false);
                      }, 300);
                    }
                  }}
                  scrollEventThrottle={400} // Limit how often the scroll event fires
                >
                  {profileViews
                    .slice(0, visibleCount) // Show all visible views regardless of preview mode
                    .map((view, index) => (
                      <TouchableOpacity 
                        key={view.id} 
                        style={[
                          styles.viewItem, 
                          !view.seen && styles.newViewItem,
                          // Add a separator except for the first item
                          index !== 0 && styles.viewItemWithBorder
                        ]} 
                        onPress={(e) => handleViewPress(view, e)} 
                        activeOpacity={0.8}
                      >
                        <View style={styles.viewAvatarContainer}>
                          {/* Show app icon for premium viewers who haven't been revealed */}
                          {view.isPremiumViewer && !view.isRevealed && (hasGemPlus || (premiumPreviewActive && revealedPreviewViews.includes(view.id))) ? (
                            <Image 
                              source={{ uri: 'https://i.imgur.com/6dTZI83.png' }} // Ghost icon placeholder
                              style={styles.viewAvatar} 
                            />
                          ) : (
                            <Image 
                              source={{ uri: view.viewerAvatar || 'https://via.placeholder.com/40/000000/FFFFFF/?text=?' }} 
                              style={styles.viewAvatar} 
                            />
                          )}
                          
                          {/* Apply blur for non-premium users unless this view was part of free preview */}
                          {!hasGemPlus && !(premiumPreviewActive && revealedPreviewViews.includes(view.id)) && (
                            <BlurView intensity={90} tint="dark" style={StyleSheet.absoluteFill} />
                          )}
                        </View>
                        
                        <View style={styles.viewInfo}>
                          {/* Handle different name display scenarios */}
                          {hasGemPlus || view.isRevealed ? (
                            <View style={{flexDirection: 'row', alignItems: 'center'}}>
                              <Text style={styles.viewName}>{view.viewerName}</Text>
                              {view.isGhostMode && (
                                <View style={{marginLeft: 6, backgroundColor: '#5D3FD3', paddingHorizontal: 6, paddingVertical: 2, borderRadius: 4}}>
                                  <Text style={{color: 'white', fontSize: 10, fontWeight: 'bold'}}>GHOST</Text>
                                </View>
                              )}
                            </View>
                          ) : (
                            <Text style={styles.viewName}>Someone</Text>
                          )}
                          
                          {/* Show time and visit count */}
                          <View style={styles.viewMetaContainer}>
                            <Text style={styles.viewTimestamp}>{view.timestamp}</Text>
                            
                            {/* Visit count badge */}
                            {view.visitCount > 1 && (
                              <View style={styles.visitCountContainer}>
                                <MaterialIcons name="visibility" size={12} color="#B768FB" />
                                <Text style={styles.visitCountText}>×{view.visitCount}</Text>
                              </View>
                            )}
                          </View>
                        </View>
                        
                        {/* Show appropriate icon based on status */}
                        {view.isPremiumViewer && !view.isRevealed && (hasGemPlus || (premiumPreviewActive && revealedPreviewViews.includes(view.id))) ? (
                          <TouchableOpacity
                            style={styles.revealButton}
                            onPress={() => promptPurchaseReveal(view)}
                          >
                            <Text style={styles.revealButtonText}>100</Text>
                            <MaterialIcons name="diamond" size={14} color="#B768FB" />
                          </TouchableOpacity>
                        ) : !hasGemPlus && !(premiumPreviewActive && revealedPreviewViews.includes(view.id)) ? (
                          <View>
                            <MaterialIcons name="lock" size={18} color="#8F8F8F" />
                          </View>
                        ) : null}
                      </TouchableOpacity>
                    ))}
                    
                  {/* Scroll hint shown below third item when there are more to see */}
                  {profileViews.length > 3 && !isLoadingMore && visibleCount < profileViews.length && (
                    <View style={styles.scrollHintContainer}>
                      <MaterialIcons name="keyboard-arrow-down" size={20} color="#A0A0A0" />
                      <Text style={styles.scrollHintText}>Scroll for more</Text>
                    </View>
                  )}
                    
                  {/* Loading indicator shown when scrolling near bottom */}
                  {isLoadingMore && visibleCount < profileViews.length && (
                    <View style={styles.loadingMoreContainer}>
                      <Text style={styles.loadingMoreText}>Loading more...</Text>
                    </View>
                  )}
                  
                  {/* End of list message - shown when all profiles are loaded */}
                  {!isLoadingMore && visibleCount >= profileViews.length && profileViews.length > 3 && (
                    <View style={styles.endOfListContainer}>
                      <Text style={styles.endOfListText}>That's all for now</Text>
                    </View>
                  )}
                </ScrollView>
                
                {/* Show premium features or upgrade options */}
                {!hasGemPlus && (
                  <View style={styles.premiumSection}>
                    <View style={styles.premiumCard}>
                      <MaterialIcons name="workspace-premium" size={22} color="#B768FB" style={{ marginRight: 8 }} />
                      <View style={{ flex: 1 }}>
                        <Text style={styles.premiumCardTitle}>Unlock All Profile Viewers</Text>
                        <Text style={styles.premiumCardDescription}>
                          See who's viewing your profile and browse anonymously with Gem Plus
                        </Text>
                      </View>
                    </View>
                    
                    <View style={styles.premiumButtonRow}>
                      <TouchableOpacity 
                        style={[styles.upgradeButton, { flex: 1 }]} 
                        onPress={handleUpgradePress}
                      >
                        <Text style={styles.upgradeButtonText}>Upgrade to Gem Plus</Text>
                      </TouchableOpacity>
                      
                      <TouchableOpacity 
                        style={[
                          styles.upgradeButton, 
                          { 
                            marginLeft: 8, 
                            backgroundColor: 'rgba(90, 120, 230, 0.15)',
                            borderWidth: 1,
                            borderColor: 'rgba(90, 120, 230, 0.5)',
                            paddingHorizontal: 10
                          }
                        ]} 
                        onPress={handlePreviewPress}
                      >
                        <Text style={[
                          styles.upgradeButtonText, 
                          { 
                            fontSize: 13,
                            color: '#A0C0FF' 
                          }
                        ]}>
                          Preview ({3 - premiumPreviewsUsed})
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                )}
              </>
            ) : (
              // Empty state UI
              <View style={styles.emptyStateContainer}>
                <MaterialIcons name="visibility-off" size={48} color="#8F8F8F" />
                <Text style={styles.emptyStateTitle}>No profile views yet</Text>
                <Text style={styles.emptyStateText}>
                  Use Spotlight to boost your profile's visibility and attract more viewers
                </Text>
                <TouchableOpacity 
                  style={styles.spotlightButton}
                  onPress={(e: GestureResponderEvent) => { 
                    e.stopPropagation();
                    router.push('/spotlight');
                  }}
                >
                  <MaterialIcons name="highlight" size={18} color="#FFFFFF" style={{ marginRight: 6 }} />
                  <Text style={styles.spotlightButtonText}>Go to Spotlight</Text>
                </TouchableOpacity>
              </View>
            )}
          </View>
        ) : (
          // Minimized preview with soft glow when new views
          <View style={styles.miniPreview}>
            {profileViews.length > 0 ? (
              <>
                {/* Show a row of mini avatars (blurred for non-premium) with most recent first */}
                <View style={styles.miniAvatarRow}>
                  {/* Get the 3 most recent profile views - they're already sorted by date */}
                  {profileViews.slice(0, Math.min(3, profileViews.length)).map((view, index) => (
                    <View 
                      key={view.id} 
                      style={[
                        styles.miniAvatarContainer,
                        { 
                          marginLeft: index > 0 ? -10 : 0, 
                          zIndex: index + 1 // First has lowest z-index, third has highest
                        }
                      ]}
                    >
                      <Image 
                        source={{ uri: view.isPremiumViewer && !view.isRevealed ? 'https://i.imgur.com/6dTZI83.png' : view.viewerAvatar }} 
                        style={styles.miniAvatar} 
                      />
                      {/* Blur only for non-premium users */}
                      {!hasGemPlus && !(premiumPreviewActive && revealedPreviewViews.includes(view.id)) && (
                        <BlurView intensity={90} tint="dark" style={StyleSheet.absoluteFill} />
                      )}
                    </View>
                  ))}
                  {/* If there are more than 3 views, show the count bubble */}
                  {profileViews.length > 3 && (
                    <View style={[
                      styles.miniAvatarMoreContainer, 
                      { 
                        marginLeft: -10, 
                        zIndex: 4 // Highest z-index to overlap all avatars
                      }
                    ]}>
                      <Text style={styles.miniAvatarMoreText}>+{profileViews.length - 3}</Text>
                    </View>
                  )}
                </View>
                <Text style={styles.miniPreviewText}>
                  {newViewCount > 0 
                    ? `${newViewCount} new view${newViewCount > 1 ? 's' : ''} today` 
                    : `${totalViewCount} total view${totalViewCount > 1 ? 's' : ''}`
                  }
                </Text>
                
                {/* Info button in mini view */}
                <TouchableOpacity 
                  style={styles.miniInfoButton}
                  onPress={() => ghostModal.showConfirmation(
                    'Profile Views',
                    'Profile views are stored for 7 days. After this period, they will automatically be removed.',
                    () => {},
                    undefined,
                    'OK',
                    undefined, // No cancel button needed
                    { name: 'info-outline', background: '#555555' }
                  )}
                >
                  <MaterialIcons name="info-outline" size={14} color="#8F8F8F" />
                </TouchableOpacity>
              </>
            ) : (
              <Text style={styles.miniPreviewText}>No profile views yet</Text>
            )}
          </View>
        )}
      </View>
      
      {/* Render the custom modal */}
      {ghostModal.config && (
        <CustomModal
          visible={ghostModal.visible}
          title={ghostModal.config.title}
          message={ghostModal.config.message}
          buttons={ghostModal.config.buttons}
          icon={ghostModal.config.icon}
          gemInfo={ghostModal.config.gemInfo}
          onClose={ghostModal.hideModal}
        />
      )}
    </>
  );
};

const NotificationsScreen = () => {
  const router = useRouter();

  // Updated dummy data for testing
  const [notifications, setNotifications] = useState<Notification[]>([
    // Test Case 1: Mention with long text
    {
      id: '1',
      type: 'mention',
      message: 'John mentioned you in #music-chat about the new synth setup that requires extensive configuration and tuning, how is it going?',
      time: '5m ago',
      seen: false,
      targetRoute: '/chat',
      targetParams: { chatId: 'music-chat' }
    },
    // Test Case 2: Reply
    {
      id: '5',
      type: 'reply',
      message: 'Sarah replied to your message: \"Sounds great! Let me know when works.\"',
      time: '2h ago',
      seen: false,
      targetRoute: '/chat',
      targetParams: { userId: 'sarah' }
    },
    // Test Case 3: Gold Sent
    {
      id: '7',
      type: 'gold_sent',
      message: 'PixelPrincess sent you 50 Gold!',
      time: '4h ago',
      seen: false
      // No targetRoute for gold sent for now
    },
  ]);

  // Handle notification press
  const handleNotificationPress = (item: Notification) => {
    setNotifications(prevNotifications =>
      prevNotifications.map(notif =>
        notif.id === item.id ? { ...notif, seen: true } : notif
      )
    );

    if (item.targetRoute) {
      router.push({ pathname: item.targetRoute, params: item.targetParams || {} });
    } else {
      console.log('Notification pressed, no route:', item.type);
    }
  };

  // Function to handle deletion
  const handleDeleteNotification = (id: string) => {
    setNotifications(prevNotifications =>
      prevNotifications.filter(notif => notif.id !== id)
    );
    console.log('Deleted notification:', id); // Optional: for debugging
  };

  // Use the new NotificationItem component in renderItem
  const renderItem = ({ item }: { item: Notification }) => (
    <NotificationItem
      item={item}
      onPress={handleNotificationPress}
      onDelete={handleDeleteNotification}
    />
  );

  return (
    <SafeAreaView style={styles.container} edges={['top', 'bottom']}>
      <CommonHeader 
        title="Notifications" 
        rightIcons={[
          {
            name: 'more-vert',
            color: '#FFFFFF',
            onPress: () => router.push('/notification-settings')
          }
        ]}
      />
      
      <ScrollView style={styles.scrollView}> 
        {/* Restore AnnouncementWidget rendering */}
        <AnnouncementWidget />
        <FriendRequestWidget />
        <ProfileViewWidget />

        {/* Separator/Title */}
        <Text style={styles.listHeader}>All Notifications</Text> 

        {/* General Notifications List */}
        {notifications.length > 0 ? (
          <FlatList
            data={notifications}
            renderItem={renderItem}
            keyExtractor={item => item.id}
            scrollEnabled={false} 
            style={styles.list}
            contentContainerStyle={styles.listContent}
          />
        ) : (
          <Text style={styles.emptyText}>No notifications yet</Text>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1C1D23',
  },
  scrollView: {
    flex: 1,
    paddingHorizontal: 16,
    paddingTop: 16,
  },
  widgetContainer: {
    backgroundColor: '#2C2D35',
    borderRadius: 10,
    marginBottom: 16,
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  widgetHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  widgetTitleContainer: { 
      flexDirection: 'row',
      alignItems: 'center',
      flex: 1, 
      marginRight: 8, 
  },
  widgetTitle: { 
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  widgetCountBadge: { // Style for the count badge
    backgroundColor: '#F23535', // Red background
    borderRadius: 9,          // Make it circular
    paddingHorizontal: 5,     // Horizontal padding for number
    minWidth: 18,             // Minimum width to maintain circle for single digits
    height: 18,               // Fixed height
    justifyContent: 'center', // Center text vertically
    alignItems: 'center',     // Center text horizontally
    marginLeft: 8,
  },
  widgetCountText: { // Style for the text inside the badge
      color: '#FFFFFF',
      fontSize: 11,           // Small font size
      fontWeight: 'bold',
      includeFontPadding: false, // Try to remove extra padding
      textAlignVertical: 'center', // Try to center vertically
  },
  widgetContent: {
    paddingTop: 8,
  },
  placeholderWidgetText: { // Keep for empty state later if needed
    color: '#A0A0A0',
    fontSize: 14,
    paddingVertical: 10, // Add padding if using
  },
  // --- Friend Request Item Styles ---
  requestItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  requestItemHandled: { // Optional: Style to dim handled requests slightly
    opacity: 0.7,
  },
  requestProfileTouchable: { // Make profile info touchable
      flexDirection: 'row',
      alignItems: 'center',
      flex: 1, // Take up available space before buttons
      marginRight: 8, // Space before potential buttons
  },
  requestAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
  },
  requestInfo: {
    flex: 1, // Allow text to take space within the touchable
  },
  requestName: {
    color: '#FFFFFF',
    fontSize: 15,
    fontWeight: 'bold',
  },
  requestMutual: {
    color: '#8F8F8F',
    fontSize: 13,
  },
  requestActions: {
    flexDirection: 'row',
  },
  requestButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
  acceptButton: {
    backgroundColor: '#4CAF50', // Green
  },
  declineButton: {
    backgroundColor: '#F23535', // Red
  },
  // --- End Widget Item Styles ---
  listHeader: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginTop: 8,
    marginBottom: 12,
  },
  list: {
    width: '100%',
  },
  listContent: {
    paddingBottom: 100,
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#2C2D35',
    borderRadius: 10,
    marginBottom: 12,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#5865F2',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  contentContainer: {
    flex: 1,
  },
  message: {
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 4,
  },
  time: {
    fontSize: 14,
    color: '#8F8F8F',
  },
  emptyText: {
    fontSize: 16,
    color: '#8F8F8F',
    textAlign: 'center',
    marginTop: 40,
  },
  // --- Profile View Item Styles ---
  viewItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
    height: 60, // Add fixed height to ensure consistent item size
  },
  viewAvatarContainer: { // Container to apply blur
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 12,
    overflow: 'hidden', // Important for BlurView mask
  },
  viewAvatar: {
    width: '100%',
    height: '100%',
  },
  viewInfo: {
    flex: 1,
  },
  nameBubble: {
    backgroundColor: '#3C3D45',
    borderRadius: 12,
    width: 70,
    height: 18,
    alignSelf: 'flex-start',
    marginBottom: 2,
  },
  bubbleText: {
    color: '#8F8F8F',
    fontSize: 13,
    fontWeight: 'medium',
  },
  viewName: {
    color: '#FFFFFF',
    fontSize: 15,
    fontWeight: 'bold',
  },
  viewTimestamp: {
    color: '#8F8F8F',
    fontSize: 13,
  },
  upgradeButton: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginTop: 12,
      paddingVertical: 10,
      backgroundColor: 'rgba(183, 104, 251, 0.15)',
      borderRadius: 8,
  },
  upgradeButtonText: {
      color: '#B768FB',
      fontSize: 14,
      fontWeight: 'bold',
  },
  totalCountText: {
      color: '#A0A0A0',
      fontSize: 13,
      marginBottom: 8,
  },
  showMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    marginTop: 4,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.08)',
  },
  showMoreButtonText: {
    color: '#A0A0A0',
    fontSize: 14,
    marginRight: 6,
  },
  // --- Announcement Item Styles (New/Restored) ---
  announcementItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  announcementAvatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginRight: 12,
  },
  announcementTextContainer: {
      flex: 1,
  },
  announcementMessage: {
    color: '#E0E0E0',
    fontSize: 14,
    marginBottom: 4,
    lineHeight: 20,
  },
  announcementTag: {
    backgroundColor: 'rgba(88, 101, 242, 0.3)',
    color: '#A7B0F5',
    borderRadius: 99,
    paddingHorizontal: 6,
    paddingVertical: 2,
    marginRight: 4,
    fontWeight: '500',
    overflow: 'hidden',
  },
  announcementTime: {
    color: '#8F8F8F',
    fontSize: 12,
  },
  scrollableAnnouncements: {
    maxHeight: 300, // Limit height when many announcements are shown
  },
  moreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    marginTop: 4,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.08)',
  },
  moreButtonText: {
    color: '#A0A0A0',
    fontSize: 14,
    marginRight: 6,
  },
  scrollableRequests: {
    maxHeight: 300, // Limit height when many requests are shown
  },
  glowingWidget: {
    borderWidth: 1,
    borderColor: '#B768FB',
    shadowColor: '#B768FB',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 5,
  },
  newViewItem: {
    backgroundColor: 'rgba(183, 104, 251, 0.08)', // Subtle highlight for unseen views
  },
  profileViewHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  headerRightActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  infoButton: {
    padding: 4,
    marginRight: 8,
  },
  anonymousToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 12,
  },
  anonymousText: {
    color: '#8F8F8F',
    fontSize: 12,
    marginRight: 4,
  },
  scrollableViews: {
    height: 200, // Fixed height to show exactly 3 items (3 * 60px height + some padding)
  },
  viewItemWithBorder: {
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  retentionNotice: {
    color: '#8F8F8F',
    fontSize: 12,
    textAlign: 'center',
    marginTop: 8,
    marginBottom: 4,
  },
  emptyStateContainer: {
    alignItems: 'center',
    paddingVertical: 16,
  },
  emptyStateTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 12,
    marginBottom: 8,
  },
  emptyStateText: {
    color: '#A0A0A0',
    fontSize: 14,
    textAlign: 'center',
    paddingHorizontal: 16,
    marginBottom: 16,
  },
  spotlightButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#5865F2',
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 8,
  },
  spotlightButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  miniPreview: {
    paddingTop: 10,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingBottom: 4,
    paddingRight: 4, // Add right padding for more space
  },
  miniAvatarRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  miniAvatarContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    overflow: 'hidden',
    borderWidth: 2,
    borderColor: '#2C2D35',
  },
  miniAvatar: {
    width: '100%',
    height: '100%',
  },
  miniAvatarMoreContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#4A4B56',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: -10,
    zIndex: 0,
    borderWidth: 2,
    borderColor: '#2C2D35',
    paddingHorizontal: 2, // Add padding to prevent text cropping
  },
  miniAvatarMoreText: {
    color: '#FFFFFF',
    fontSize: 12, // Restore original font size
    fontWeight: 'bold',
    textAlign: 'center', // Keep text centered
  },
  miniPreviewText: {
    flex: 1,
    color: '#A0A0A0',
    fontSize: 12,
    marginLeft: 12,
  },
  miniInfoButton: {
    padding: 4,
    marginLeft: 8,
  },
  premiumSection: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  premiumCard: {
    flexDirection: 'row',
    backgroundColor: 'rgba(183, 104, 251, 0.08)',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
  },
  premiumCardTitle: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  premiumCardDescription: {
    color: '#B0B0B0',
    fontSize: 12,
  },
  premiumButtonRow: {
    flexDirection: 'row',
    marginTop: 12,
  },
  previewButton: {
    paddingVertical: 10,
    paddingHorizontal: 12,
    borderRadius: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  previewButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  loadingMoreContainer: {
    padding: 10,
    alignItems: 'center',
  },
  loadingMoreText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: 'bold',
  },
  scrollHintContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
  },
  scrollHintText: {
    color: '#A0A0A0',
    fontSize: 12,
    marginLeft: 4,
  },
  endOfListContainer: {
    padding: 10,
    alignItems: 'center',
  },
  endOfListText: {
    color: '#A0A0A0',
    fontSize: 14,
    fontWeight: 'bold',
  },
  viewMetaContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  visitCountContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(183, 104, 251, 0.1)',
    borderRadius: 9,
    paddingHorizontal: 4,
    paddingVertical: 2,
    marginLeft: 8,
  },
  visitCountText: {
    color: '#B768FB',
    fontSize: 10,
    fontWeight: 'bold',
    marginLeft: 2,
  },
  revealButton: {
    flexDirection: 'row',
    padding: 6,
    backgroundColor: 'rgba(183, 104, 251, 0.1)',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  revealButtonText: {
    color: '#B768FB',
    fontSize: 10,
    fontWeight: 'bold',
    marginRight: 2,
  },
});

export default NotificationsScreen; 